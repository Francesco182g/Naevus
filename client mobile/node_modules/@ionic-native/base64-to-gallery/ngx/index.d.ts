import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface Base64ToGalleryOptions {
    /** Saved file name prefix */
    prefix: string;
    /**
     * On Android runs Media Scanner after file creation.
     * On iOS if true the file will be added to camera roll, otherwise will be saved to a library folder.
     */
    mediaScanner: boolean;
}
/**
 * @name Base64 To Gallery
 * @description This plugin allows you to save base64 data as a png image into the device
 * @usage
 * ```typescript
 * import { Base64ToGallery } from '@ionic-native/base64-to-gallery/ngx';
 *
 * constructor(private base64ToGallery: Base64ToGallery) { }
 *
 *
 * ...
 *
 *
 * this.base64ToGallery.base64ToGallery(base64Data, { prefix: '_img' }).then(
 *   res => console.log('Saved image to gallery ', res),
 *   err => console.log('Error saving image to gallery ', err)
 * );
 * ```
 * @interfaces
 * Base64ToGalleryOptions
 */
export declare class Base64ToGallery extends IonicNativePlugin {
    /**
     * Converts a base64 string to an image file in the device gallery
     * @param {string} data The actual base64 string that you want to save
     * @param {any} [options] An object with properties
     * @returns {Promise<any>} returns a promise that resolves when the image is saved.
     */
    base64ToGallery(data: string, options?: Base64ToGalleryOptions): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Base64ToGallery, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Base64ToGallery>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgQmFzZTY0VG9HYWxsZXJ5T3B0aW9ucyB7XG4gICAgLyoqIFNhdmVkIGZpbGUgbmFtZSBwcmVmaXggKi9cbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBPbiBBbmRyb2lkIHJ1bnMgTWVkaWEgU2Nhbm5lciBhZnRlciBmaWxlIGNyZWF0aW9uLlxuICAgICAqIE9uIGlPUyBpZiB0cnVlIHRoZSBmaWxlIHdpbGwgYmUgYWRkZWQgdG8gY2FtZXJhIHJvbGwsIG90aGVyd2lzZSB3aWxsIGJlIHNhdmVkIHRvIGEgbGlicmFyeSBmb2xkZXIuXG4gICAgICovXG4gICAgbWVkaWFTY2FubmVyOiBib29sZWFuO1xufVxuLyoqXG4gKiBAbmFtZSBCYXNlNjQgVG8gR2FsbGVyeVxuICogQGRlc2NyaXB0aW9uIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gc2F2ZSBiYXNlNjQgZGF0YSBhcyBhIHBuZyBpbWFnZSBpbnRvIHRoZSBkZXZpY2VcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQmFzZTY0VG9HYWxsZXJ5IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9iYXNlNjQtdG8tZ2FsbGVyeS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZTY0VG9HYWxsZXJ5OiBCYXNlNjRUb0dhbGxlcnkpIHsgfVxuICpcbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5iYXNlNjRUb0dhbGxlcnkuYmFzZTY0VG9HYWxsZXJ5KGJhc2U2NERhdGEsIHsgcHJlZml4OiAnX2ltZycgfSkudGhlbihcbiAqICAgcmVzID0+IGNvbnNvbGUubG9nKCdTYXZlZCBpbWFnZSB0byBnYWxsZXJ5ICcsIHJlcyksXG4gKiAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3Igc2F2aW5nIGltYWdlIHRvIGdhbGxlcnkgJywgZXJyKVxuICogKTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEJhc2U2NFRvR2FsbGVyeU9wdGlvbnNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQmFzZTY0VG9HYWxsZXJ5IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgYmFzZTY0IHN0cmluZyB0byBhbiBpbWFnZSBmaWxlIGluIHRoZSBkZXZpY2UgZ2FsbGVyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIFRoZSBhY3R1YWwgYmFzZTY0IHN0cmluZyB0aGF0IHlvdSB3YW50IHRvIHNhdmVcbiAgICAgKiBAcGFyYW0ge2FueX0gW29wdGlvbnNdIEFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGltYWdlIGlzIHNhdmVkLlxuICAgICAqL1xuICAgIGJhc2U2NFRvR2FsbGVyeShkYXRhOiBzdHJpbmcsIG9wdGlvbnM/OiBCYXNlNjRUb0dhbGxlcnlPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xufVxuIl19